/*************************************************************
 * ClientRegisterUI.java                                     *
 *                                                           *
 * This class will be called from the ClientConsoleUI if     *
 * the user is not register. A form will appear for the user *
 * to enter his details and submit them to the server.       *
 *                                                           *
 *                                                           *
 * The class also have an Inner class responsible for        *
 *                                                           *
 * Created on 05-Jun-2010, 12:55:48                          *
 *                                                           *
 * @author Klitos Christodoulou                              *
 * @email christk6@cs.man.ac.uk                              *
 *                                                           *
 ************************************************************/

package CoreClient;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

public class ClientRegisterUI extends javax.swing.JFrame {

  //Declare variables
  private ClientConsoleUI logInConsole; /*Hold an object of ClientConsoleUI*/


    /** Creates new form ClientRegisterUI */
    public ClientRegisterUI(ClientConsoleUI aConsole) {

      /*Hold an object of ClientConsoleUI*/
      this.logInConsole = aConsole;

      /*Desing the GUI*/
      initComponents();

      /*Place JFrame in the middle of the screen*/
      this.setLocationRelativeTo(null);

      /*Replace window listener*/
      this.addWindowListener(new WindowAdapter()
       {
         public void windowClosing( WindowEvent event) {
           quitMethod();
       }//end WindowEvent
      });//end WindowListener
    }//end constructor

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jPanel1 = new javax.swing.JPanel();
    jPanel2 = new javax.swing.JPanel();
    fullNameLbl = new javax.swing.JLabel();
    userNameTxt = new javax.swing.JTextField();
    userName2Lbl = new javax.swing.JLabel();
    pass1Lbl = new javax.swing.JLabel();
    pass2Lbl = new javax.swing.JLabel();
    email1Lbl = new javax.swing.JLabel();
    email1Txt = new javax.swing.JTextField();
    passWord1Txt = new javax.swing.JPasswordField();
    passWord2Txt = new javax.swing.JPasswordField();
    email2Lbl = new javax.swing.JLabel();
    email2Txt = new javax.swing.JTextField();
    error1Lbl = new javax.swing.JLabel();
    full_name_txt = new javax.swing.JTextField();
    error2Lbl = new javax.swing.JLabel();
    error3Lbl = new javax.swing.JLabel();
    jLabel1 = new javax.swing.JLabel();
    cancelButton = new javax.swing.JButton();
    registerButton = new javax.swing.JButton();
    jLabel3 = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    setTitle("eLearningMaps - Create a new account");
    setLocationByPlatform(true);
    setName("userRegisterDetailsFrame"); // NOI18N
    setResizable(false);

    jPanel1.setBackground(new java.awt.Color(255, 255, 255));

    fullNameLbl.setFont(new java.awt.Font("Tahoma", 1, 12));
    fullNameLbl.setText("Full name");

    //Customizable code for fullnametext
    userNameTxt.getDocument().addDocumentListener(new InputLengthListener(15,"username",error1Lbl));

    userName2Lbl.setFont(new java.awt.Font("Tahoma", 1, 12));
    userName2Lbl.setText("eLearningMaps - Username");

    pass1Lbl.setFont(new java.awt.Font("Tahoma", 1, 12));
    pass1Lbl.setText("Password");

    pass2Lbl.setFont(new java.awt.Font("Tahoma", 1, 12));
    pass2Lbl.setText("Repeat Password");

    email1Lbl.setFont(new java.awt.Font("Tahoma", 1, 12));
    email1Lbl.setText("Email");

    //Customizable code for fullnametext
    email1Txt.getDocument().addDocumentListener(new InputLengthListener(30,"email1",error3Lbl));

    //Customizable code for fullnametext
    passWord1Txt.getDocument().addDocumentListener(new InputLengthListener(20,"password1",error2Lbl));

    //Customizable code for fullnametext
    passWord2Txt.getDocument().addDocumentListener(new InputLengthListener(20,"password2",error2Lbl));

    email2Lbl.setFont(new java.awt.Font("Tahoma", 1, 12));
    email2Lbl.setText("Repeat Email");

    //Customizable code for fullnametext
    email2Txt.getDocument().addDocumentListener(new InputLengthListener(30,"email2",error3Lbl));

    error1Lbl.setForeground(new java.awt.Color(190, 11, 11));

    //Customizable code for fullnametext
    full_name_txt.getDocument().addDocumentListener(new InputLengthListener(40,"fullname",error1Lbl));

    error2Lbl.setForeground(new java.awt.Color(190, 11, 11));

    error3Lbl.setForeground(new java.awt.Color(190, 11, 11));

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(fullNameLbl)
              .addComponent(full_name_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(userNameTxt)
              .addComponent(userName2Lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGap(67, 67, 67)
            .addComponent(error1Lbl))
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addComponent(pass1Lbl)
            .addGap(171, 171, 171)
            .addComponent(pass2Lbl))
          .addGroup(jPanel2Layout.createSequentialGroup()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(passWord1Txt, javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(email1Txt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE))
              .addComponent(email1Lbl))
            .addGap(18, 18, 18)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(email2Lbl)
              .addComponent(email2Txt)
              .addComponent(passWord2Txt, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(error3Lbl)
              .addComponent(error2Lbl))))
        .addContainerGap(234, Short.MAX_VALUE))
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(fullNameLbl)
          .addComponent(userName2Lbl))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(userNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(full_name_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(error1Lbl))
        .addGap(27, 27, 27)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(pass1Lbl)
          .addComponent(pass2Lbl))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(passWord1Txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(passWord2Txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(error2Lbl))
        .addGap(18, 18, 18)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(email1Lbl)
          .addComponent(email2Lbl))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(email1Txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(email2Txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(error3Lbl))
        .addContainerGap(57, Short.MAX_VALUE))
    );

    jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18));
    jLabel1.setText("Create a new account");

    cancelButton.setText("Go Back..");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelButtonActionPerformed(evt);
      }
    });

    registerButton.setText("Create Account");
    registerButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        registerButtonActionPerformed(evt);
      }
    });

    jLabel3.setText("Note: Please fill in all the fields");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel1)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addComponent(jLabel3)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 368, Short.MAX_VALUE)
            .addComponent(cancelButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(registerButton))
          .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addGap(15, 15, 15)
        .addComponent(jLabel1)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(25, 25, 25)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(registerButton)
          .addComponent(cancelButton))
        .addContainerGap(12, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

    
/***
 * This is the action performed when user do not want to register and clicks
 * "Cancel"
 * 
 * @param evt
 */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
      //Hide this window from the client
       this.setVisible(false);

      //Enable the Log-in ClientConsoleUI
      this.logInConsole.setVisible(true);
    }//GEN-LAST:event_cancelButtonActionPerformed

    
/************************************************************
 * When the user fill the form and clicks "Create account".
 *  (1) This method checks all the details if correct
 *  (2) Start a new thread that will talk with the server
 *      and send the information.
 *  (3) A progress bar will apear on the screen.
 * 
 * @param evt
 */
    private void registerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerButtonActionPerformed

    boolean fullname_ok = true;
    boolean username_ok = true;
    boolean pass_ok = true;
    boolean email_ok = true;

    //Get strings from the textboxes
    String full_name = full_name_txt.getText().trim();
    String user_name = userNameTxt.getText().toLowerCase().trim();
    String pass_word1 = new String (passWord1Txt.getPassword());
    String pass_word2 = new String (passWord2Txt.getPassword());
    String e_mail1  = email1Txt.getText().toLowerCase().trim();
    String e_mail2  = email2Txt.getText().toLowerCase().trim();

    //Check if fullname is empty
    if (full_name.equals("")) {
     fullname_ok = false;
    }//end if
    else
     fullname_ok = true;

         
    //Check if username is empty
    if (user_name.equals("")) {
      username_ok = false;
     }
    else
     username_ok = true;

    //If username not empty then check length
    if (!user_name.equals("")) {

      String str = user_name;
      
      if ( ! (str.length() > 0 && str.length() <= 15) ) {
        username_ok = false;
      }//inner if
      else
       username_ok = true;
    }//end if

    
    //Check if password is empty
    if (pass_word1.equals("")) {
     pass_ok = false;
     }
    else
     pass_ok = true;

    //If password not empty check length and if is equal win pass2
    if (!pass_word1.equals("")) {

      String pstr = pass_word1;

      if ( ! (pstr.length() > 0 && pstr.length() <= 20) ) {
        pass_ok = false;
      }//inner if
      else
       pass_ok = true;

      /*Check if the two passwords are the same*/
      if (! pstr.equals(pass_word2)) {
        error2Lbl.setText("Passwords are not the same.");
        pass_ok = false;
      }//inner if
      else
       pass_ok = true;
    }//end if

  
    //Check if email is empty
    if (e_mail1.equals("") || !e_mail1.contains("@")) {
     email_ok = false;
    }
    else
     email_ok = true;

    //If email not empty check length and if is equal win email2Txt
    if (!e_mail1.equals("") && e_mail1.contains("@")) {

      String estr = e_mail1;

      if ( ! (estr.length() > 0 && estr.length() <= 35) ) {
        email_ok = false;
      }//inner if
      else
       email_ok = true;

      /*Check if the two emails are the same*/
      if (! estr.equals(e_mail2)) {
        error3Lbl.setText("Emails are not the same.");
        email_ok = false;
      }//inner if
      else
       email_ok = true;
     }//end if

    /*******************************
     * IF FORM PASSES ALL THE TESTS
     *
     * Then create a new thread that will connect with the server
     */
    if (fullname_ok && username_ok && pass_ok && email_ok) {

      /****************************************************************
       * Sent data to the new thread that will do the Socket connection.
       * Sent : (1) get the IP and PORT from ClientCOnsileUI class
       *        (2) create the new thread with this details
       *        (3) thread msg will be in this form:
       *            /command?args1?args2?args2
       *        (4) wait for confirmation from the thread
       *
       */

      CommunicateServer cs;

      /*If no communication with client exist, create it*/
      if (this.logInConsole.getCommunicateServer() == null) {

       /*Create the object*/
       cs = new CommunicateServer(logInConsole.getDefaultServerIP(),
                                  logInConsole.getDefaultServerPORT());

       /*send a reference to the ClientConsole class*/
       this.logInConsole.setCommunicateServer(cs);
      }//end if
      else {
        cs = this.logInConsole.getCommunicateServer();
      }//else

      /*Before using username make sure to eliminate any special charactes*/
      user_name = RemoveSpecialCharacters(user_name);

      /*Call the method to do register*/
      if (cs.doRegister(full_name, user_name, pass_word1, e_mail1)){
       createWarningDialog("Username : " + user_name + " register successful." +
         "\n\nNote: Do not forget to store your username & password in a safe place.");

       /*Hide register form*/
       this.setVisible(false);

       /*Appear loginConsole, if the user needs to login*/
       logInConsole.setVisible(true);
      }//end if
      else {
       error1Lbl.setText("Username already in use.");
      }//end else

    }//end if
    }//GEN-LAST:event_registerButtonActionPerformed


 /***
  * This method is responsible for removing special characters from
  * usernames. 
  * 
  * @param str
  * @return
  */
 public String RemoveSpecialCharacters(String str) {
   StringBuilder sb = new StringBuilder();
   for (char c: str.toCharArray()) {
      if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || c == '.' || c == '_') {
         sb.append(c);
      }
   }
   return sb.toString();
 }//end method




  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton cancelButton;
  private javax.swing.JLabel email1Lbl;
  private javax.swing.JTextField email1Txt;
  private javax.swing.JLabel email2Lbl;
  private javax.swing.JTextField email2Txt;
  private javax.swing.JLabel error1Lbl;
  private javax.swing.JLabel error2Lbl;
  private javax.swing.JLabel error3Lbl;
  private javax.swing.JLabel fullNameLbl;
  private javax.swing.JTextField full_name_txt;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JLabel pass1Lbl;
  private javax.swing.JLabel pass2Lbl;
  private javax.swing.JPasswordField passWord1Txt;
  private javax.swing.JPasswordField passWord2Txt;
  private javax.swing.JButton registerButton;
  private javax.swing.JLabel userName2Lbl;
  private javax.swing.JTextField userNameTxt;
  // End of variables declaration//GEN-END:variables

/****************************************************************
 * Supporting methods of this Class
 */

 /********************************************************************
  * This method will be used to create a popUp menu each time an error
  * occurs.
  */
 private void createWarningDialog(String warn)
 {
   JOptionPane.showMessageDialog(this,"eLearningMaps - " + warn);
 }//end


 /***
  * This method will be called when the user wants to cancel the
  * process of creating a new account with the server.
  */
 private void quitMethod()
  {
   //Setup msg appear to the dialog window
   String popUpMsg = "Quit eLearningMaps Client?" ;

   int confirm = JOptionPane.showConfirmDialog
  	(null,popUpMsg,"eLearningMaps - Warning",JOptionPane.YES_NO_OPTION);

   //if yes button clicked exit
   if (confirm == JOptionPane.YES_OPTION)
    {
     //Exit application close all windows
     System.exit(0);
    }//end if
  }//end quit method




  
/****************************************************************
*                      INNER CLASS                              *
* This class creates a Doocument Listener for the user register *
* form. It monitors all the text fields and makes sure the user *
* insert the correct details. This class implements a Document  *
* listener. Each text field is register to that listener. An    *
* appropriate error message is displayed to the user each time  *
* an error occur.                                               *
*                                                               *
*****************************************************************/

class InputLengthListener implements DocumentListener {

  //This property set the maximum lenght of the text field.
  int max;
  String action;
  javax.swing.JLabel label;

  public InputLengthListener(int max, String a, javax.swing.JLabel l) {
     this.max = max;
     this.action = a;
     this.label = l;
   }//end constructor

  public void textValueChanged(DocumentEvent e) throws BadLocationException {
	  Document doc = (Document) e.getDocument();

      if (action.equals("fullname")){
        if (doc.getLength() == 0)
          label.setText("Please fill in your full name.");
        else
          label.setText("");
      }//end if
      else if (action.equals("username")) {
         if(doc.getLength() > max) 
          label.setText("Too long: 15 characters max.");
         else if(doc.getLength() == 0)
           label.setText("Please fill in your user name.");
         else
          label.setText("");
      }//end if
      else if (action.equals("password1")) {
         if(doc.getLength() > max)
          label.setText("Too long: 20 characters max.");
         else if(doc.getLength() == 0)
           label.setText("Please fill in a password.");
         else
          label.setText("");
      }//end if
      else if (action.equals("password2")) {
         if(doc.getLength() > max)
          label.setText("Too long: 20 characters max.");
         else if(doc.getLength() == 0)
           label.setText("Please retype your password.");
         else
          label.setText("");
      }//end if
      else if (action.equals("email1")) {
         if(doc.getLength() > max)
          label.setText("Too long: 35 characters max.");
         else if (doc.getLength() == 0)
           label.setText("Please fill in an email.");
         else if (doc.getLength() > 0 && doc.getLength() <= max) {
            String email_str = doc.getText(0, doc.getLength());

            if (! email_str.contains("@")) {
              label.setText("Valid email" +
                            " (e.g address@domainname)");
            }//end
            else
             label.setText("");      
          }//else if
         else
          label.setText("");
      }//end if
      else if (action.equals("email2")) {
         if(doc.getLength() > max)
          label.setText("Too long: 35 characters max.");
         else if(doc.getLength() == 0)
           label.setText("Please retype your email.");
         else
          label.setText("");
      }//end if

     }//end method

    public void insertUpdate(DocumentEvent e) {
      try {
        textValueChanged(e);
      } catch (BadLocationException ex) {
        Logger.getLogger(ClientRegisterUI.class.getName()).log(Level.SEVERE, null, ex);
      }
    }//end method

    public void removeUpdate(DocumentEvent e) {
      try {
        textValueChanged(e);
      } catch (BadLocationException ex) {
        Logger.getLogger(ClientRegisterUI.class.getName()).log(Level.SEVERE, null, ex);
      }
    }//end method

    public void changedUpdate(DocumentEvent e) {}
   }//end inner class

}//end class
