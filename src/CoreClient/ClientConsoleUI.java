package CoreClient;

import CoreDrawingAsy.DrawConsoleUI;
import elearningmaps.User;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;

/****************************************************************
 * ClientConsoleUI.java                                         *
 *                                                              *
 *                                                              *
 *                                                              *
 * This class will present a login form to the user where the   *
 * user can register to the service provided by eLearningMaps.  *
 * From this GUI the user can choose if he wants to go online   *
 * or draw offline.                                             *
 *                                                              *
 * @author Klitos Christodoulou                                 *
 * email: christk6@cs.man.ac.uk                                 *
 *                                                              *
 * Created on 05-Jun-2010, 11:32:54                             *
 *                                                              *
 ****************************************************************/

public class ClientConsoleUI extends javax.swing.JFrame {

 /*Declaration of variables*/
 
 /*private String IP = "192.168.0.2";   /*Testing*/
 private String IP = "";   /*Hold the default IP of the server to connect*/
 private int  PORT = 3830;            /*Hold the default PORT of the server to connect*/
 private int secondaryPort = 3831;  /*Port for secondary server (NEW SERVER)*/

 /*Hold a reference to the next UI - ClientScreenUI class*/
 private ClientScreenUI clientScr = null;

 /**
 * Hold a reference to communicate Server object. Object created either
 * by this class or by ClientRegisterUI;
 */
 private CommunicateServer communicateSrv = null;

 /** Creates new form ClientConsoleUI */
 public ClientConsoleUI() {
  try {
   initComponents();

   /*Hold the default IP of the server to connect -
   This may throw an Exception*/

   IP = InetAddress.getLocalHost().getHostAddress();

   /*Place JFrame in the middle of the screen*/
   this.setLocationRelativeTo(null);

   /*Replace window listener*/
   this.addWindowListener(new WindowAdapter()
    {
     public void windowClosing( WindowEvent event) {
     quitMethod();
     }//end WindowEvent
    });//end WindowListener
   } catch (Exception e) {
   createWarningDialog("ClientConsoleUI - Cannot retrieve localhost");
  }//catch
 }//end constructor

 /** This method is called from within the constructor to
  * initialize the form.
  * WARNING: Do NOT modify this code. The content of this method is
  * always regenerated by the Form Editor.
  */
 @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    mainPanel = new javax.swing.JPanel();
    userLbl = new javax.swing.JLabel();
    userNameTxt = new javax.swing.JTextField();
    passLbl = new javax.swing.JLabel();
    passTxt = new javax.swing.JPasswordField();
    newUserLabel = new javax.swing.JLabel();
    forgotPassLabel = new javax.swing.JLabel();
    goOnlineBtn = new javax.swing.JButton();
    drawOfflineBtb = new javax.swing.JButton();
    clientConsoleLogo = new javax.swing.JLabel();
    jMenuBar1 = new javax.swing.JMenuBar();
    fileMenu = new javax.swing.JMenu();
    jMenuItem1 = new javax.swing.JMenuItem();
    settingsMenu = new javax.swing.JMenu();
    menuItemServer = new javax.swing.JMenuItem();
    menuItemIncoming = new javax.swing.JMenuItem();
    localOnlyCheckBox = new javax.swing.JCheckBoxMenuItem();
    helpMenu = new javax.swing.JMenu();
    jMenuItem3 = new javax.swing.JMenuItem();

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    setTitle("eLearningMaps - Client");
    setBackground(new java.awt.Color(255, 255, 255));
    setLocationByPlatform(true);
    setName("clientFrame"); // NOI18N
    setResizable(false);

    mainPanel.setBackground(new java.awt.Color(255, 255, 255));
    mainPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
      public void mouseMoved(java.awt.event.MouseEvent evt) {
        mainPanelMouseMoved(evt);
      }
    });

    userLbl.setText("Username");

    passLbl.setText("Password");

    newUserLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    newUserLabel.setForeground(new java.awt.Color(0, 102, 102));
    newUserLabel.setText("New user registration");
    newUserLabel.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        newUserLabelMouseClicked(evt);
      }
    });
    newUserLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
      public void mouseMoved(java.awt.event.MouseEvent evt) {
        newUserLabelMouseMoved(evt);
      }
    });

    forgotPassLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
    forgotPassLabel.setForeground(new java.awt.Color(0, 102, 102));
    forgotPassLabel.setText("Forgot Password");
    forgotPassLabel.setToolTipText("Recover your pass.");
    forgotPassLabel.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        forgotPassLabelMouseClicked(evt);
      }
    });
    forgotPassLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
      public void mouseMoved(java.awt.event.MouseEvent evt) {
        forgotPassLabelMouseMoved(evt);
      }
    });

    goOnlineBtn.setText("Go Online!");
    goOnlineBtn.setToolTipText("Sign in");
    goOnlineBtn.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        goOnlineBtnActionPerformed(evt);
      }
    });

    drawOfflineBtb.setText("Go Offline");
    drawOfflineBtb.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        drawOfflineBtbActionPerformed(evt);
      }
    });

    clientConsoleLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/elearningmaps/ico/logo.png"))); // NOI18N

    javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
    mainPanel.setLayout(mainPanelLayout);
    mainPanelLayout.setHorizontalGroup(
      mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(mainPanelLayout.createSequentialGroup()
        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(mainPanelLayout.createSequentialGroup()
            .addGap(113, 113, 113)
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(forgotPassLabel)
              .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                .addComponent(passTxt, javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(userNameTxt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                .addComponent(userLbl, javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(newUserLabel)
                .addComponent(passLbl, javax.swing.GroupLayout.Alignment.LEADING))))
          .addGroup(mainPanelLayout.createSequentialGroup()
            .addGap(162, 162, 162)
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
              .addComponent(drawOfflineBtb, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(goOnlineBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)))
          .addGroup(mainPanelLayout.createSequentialGroup()
            .addGap(122, 122, 122)
            .addComponent(clientConsoleLogo)))
        .addContainerGap(124, Short.MAX_VALUE))
    );
    mainPanelLayout.setVerticalGroup(
      mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
        .addComponent(clientConsoleLogo)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
        .addComponent(userLbl)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(userNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(newUserLabel)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(passLbl)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(passTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(forgotPassLabel)
        .addGap(18, 18, 18)
        .addComponent(goOnlineBtn)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(drawOfflineBtb)
        .addGap(50, 50, 50))
    );

    fileMenu.setText("eLearningMaps");

    jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
    jMenuItem1.setText("Quit");
    jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        eMenuItemExitActionPerformed(evt);
      }
    });
    fileMenu.add(jMenuItem1);

    jMenuBar1.add(fileMenu);

    settingsMenu.setText("Settings");

    menuItemServer.setText("Main Server...");
    menuItemServer.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menuItemServerActionPerformed(evt);
      }
    });
    settingsMenu.add(menuItemServer);

    menuItemIncoming.setText("Connections Port...");
    menuItemIncoming.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        menuItemIncomingActionPerformed(evt);
      }
    });
    settingsMenu.add(menuItemIncoming);

    localOnlyCheckBox.setText("Only Local Network");
    settingsMenu.add(localOnlyCheckBox);

    jMenuBar1.add(settingsMenu);

    helpMenu.setText("Help");

    jMenuItem3.setText("About");
    jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        eMenuItemAboutActionPerformed(evt);
      }
    });
    helpMenu.add(jMenuItem3);

    jMenuBar1.add(helpMenu);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

   /******************************************************************
    * Get the action from eLearningMaps -> Quit
    * Exit the application
    * 
    * @param evt
    */
    private void eMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eMenuItemExitActionPerformed
     this.quitMethod();
    }//GEN-LAST:event_eMenuItemExitActionPerformed

    /***
     * Changing the mouse to the default.
     *
     * @param evt
     */
    private void mainPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainPanelMouseMoved
      this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));

     //Change the colour to the default foreground to
     newUserLabel.setForeground(new Color(0,102,102));
     forgotPassLabel.setForeground(new Color(0,102,102));
    }//GEN-LAST:event_mainPanelMouseMoved

    /***
     * If the mouse over the "Forgot password link". Change cursor
     *
     * @param evt
     */
    private void forgotPassLabelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forgotPassLabelMouseMoved
     this.setCursor(new Cursor(Cursor.HAND_CURSOR));

     //Change label foreground to
     forgotPassLabel.setForeground(new Color(1,189,101));
    }//GEN-LAST:event_forgotPassLabelMouseMoved
    
    /***
     * If the mouse over the "New user register". Change cursor
     *
     * @param evt
     */
    private void newUserLabelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newUserLabelMouseMoved
     this.setCursor(new Cursor(Cursor.HAND_CURSOR));

     //Change label foreground to
     newUserLabel.setForeground(new Color(1,189,101));

    }//GEN-LAST:event_newUserLabelMouseMoved

    private void eMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eMenuItemAboutActionPerformed

      String msg = "eLearningMaps - Version 1.0";
      msg += "\n-----------------------------------------";
      msg += "\n";
      msg += "\nBy Klitos Christodoulou";
      msg += "\nMSc in Advanced Computer Science";
      msg += "\nThe University Of Manchester";
      msg += "\n";
      msg += "\n                              (2009-2010)";
      
      JOptionPane.showMessageDialog(this, msg);
    }//GEN-LAST:event_eMenuItemAboutActionPerformed

  /*******************************************************************
   * The user clicks on the "Create account" link. The application
   * redirect to a GUI where the user can register an account with
   * the server. A reference of this object is sent as well.
   *
   * @param evt
   */
    private void newUserLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newUserLabelMouseClicked
       
      //Call the ClientRegisterUI class
      new ClientRegisterUI(this).setVisible(true);

      //Hide this window from user.
      this.setVisible(false);
    }//GEN-LAST:event_newUserLabelMouseClicked

    /***
     *
     * Menu item
     * Settings -> Connection
     *
     * Because the servers IP may not be static and may change dynamically
     * this allows the user to enter a server's ip.
     */
    private void menuItemServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemServerActionPerformed
     try {
       String response = JOptionPane.showInputDialog
           ("Provide server IP and Port (e.g 192.168.0.1:port)");

       /*Trim from spaces*/
       response.trim();

       /*Tokenize the string*/
       StringTokenizer requestTokens = new StringTokenizer(response, ":");

       this.IP = requestTokens.nextToken();
       this.PORT = Integer.parseInt(requestTokens.nextToken());

       System.out.println(""+ this.IP + " " + this.PORT);

     } catch (Exception e) {
       createWarningDialog("Please follow the example.");
     }//catch
    }//GEN-LAST:event_menuItemServerActionPerformed

 /***
  * Only localNetwork checkbox
  *
  */
public boolean getLocalNetworkCheck() {
  
  if (this.localOnlyCheckBox.isSelected())
    return true;
  else
    return false;
}


 /****
  * ClientConsileUI -> Go Online!
  *
  * The client request to go online
  * 
  * @param evt
  */
    private void goOnlineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goOnlineBtnActionPerformed

    /*Check if a connection has been made*/
    if (this.getCommunicateServer() == null) {

     /*Create the object*/
     //System.out.println("----> Default IP : " + getDefaultServerIP() );
     communicateSrv = new CommunicateServer(getDefaultServerIP(),
                                            getDefaultServerPORT());

     /*Update communicateSrv*/
     this.setCommunicateServer(communicateSrv);
    }//end if

    /*Get details from screen*/
    String usern = userNameTxt.getText().toLowerCase().trim();
    String passw = new String (passTxt.getPassword());

    /*Call method to do the login*/
    User res = communicateSrv.doLogin(usern, passw);

    /*If login success*/
     if (res != null) {
      /*hide login window*/
      this.setVisible(false);

      /*Popup the client screen window*/
      /*Send the User object to the client screen*/
      clientScr = new ClientScreenUI(res, communicateSrv, this);
      clientScr.setVisible(true);
     }//end if
     else {
      createWarningDialog("Cannot log-in user: " + usern
                          + "\n Errors: username not exist"
                          + "\n or user already logged in.");
     }//end else
    }//GEN-LAST:event_goOnlineBtnActionPerformed

    
  /******************************************************************
   * eLearningMaps allow a user to retrieve a lost password. 
   * 
   * @param evt
   */
    private void forgotPassLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_forgotPassLabelMouseClicked
     //Initially check if username textbox is not empty
     if (! userNameTxt.getText().equals("")) {
       /*(1) Connect to the server
        *    If a connection is not has not been made create one, otherwise
        *    just use communicateSrv object.
        */
        if (this.getCommunicateServer() == null) {

         /*Create the object*/
         //System.out.println("----> Default IP : " + getDefaultServerIP() );
         communicateSrv = new CommunicateServer(getDefaultServerIP(),
                                              getDefaultServerPORT());

         /*Update communicateSrv*/
         this.setCommunicateServer(communicateSrv);
       }//end inner if

        /*Communicate with the server using communicateSrv object
          (2) Get details from screen - get username*/

        String usern = userNameTxt.getText().toLowerCase().trim();

        /*(3) Communicate with server and request a pass recover*/
        String result = communicateSrv.doPassRecover(usern);

        /*(4) Prompt user to check his/her inbox*/
        this.createWarningDialog(result);
        

     }//end if
     else {
      this.createWarningDialog("Please enter a username.");
     }//else
    }//GEN-LAST:event_forgotPassLabelMouseClicked

    private void menuItemIncomingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemIncomingActionPerformed
     try {
       String response = JOptionPane.showInputDialog
           ("Provide Port for incoming connections (e.g 3831)");

       /*Trim from spaces*/
       response.trim();

       /*Set the port*/
       this.secondaryPort = Integer.parseInt(response);

     } catch (Exception e) {
       createWarningDialog("Please follow the example.");
     }//catch
    }//GEN-LAST:event_menuItemIncomingActionPerformed

 /***
  * This method will start the Asyncronous eLearningMaps tool.
  * 
  * @param evt
  */
    private void drawOfflineBtbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawOfflineBtbActionPerformed
      this.setVisible(false);

      /*Popup the client screen window*/
      new DrawConsoleUI().setVisible(true);
    }//GEN-LAST:event_drawOfflineBtbActionPerformed


  /*******************************************************************
  * This method will be called when the user wants to quit the
  * application
  */
 private void quitMethod()
  {
   //Setup msg appear to the dialog window
   String popUpMsg = "Quit eLearningMaps Client?" ;

   int confirm = JOptionPane.showConfirmDialog
  	(null,popUpMsg,"eLearningMaps - Warning",JOptionPane.YES_NO_OPTION);

   //if yes button clicked exit
   if (confirm == JOptionPane.YES_OPTION)
    {
     /*Check if a communication with the server is made*/
     if (communicateSrv != null) {
       if (communicateSrv.getSocket() != null)
         communicateSrv.doQuit();

         //System.out.println("Quit Application");
      }//end if
   

     //Exit application close all windows
     System.exit(0);
    }//end if
  }//end quit method


 /******************************************
  *  SUPPORTING METHODS OF THE CLASS
  *
  */

 //Get Secondary Server (NEW SERVER) Port
  public int getNewServerPort() {
   return this.secondaryPort;
 }//end


 //Get default IP
 public String getDefaultServerIP() {
   return this.IP;
 }//end

 //Get default PORT
 public int getDefaultServerPORT() {
   return this.PORT;
 }//end

 //Set Secondary Server (NEW SERVER) Port
  public void setNewServerPort(int secp) {
   this.secondaryPort = secp;
 }//end

 //Set default IP
 public void setDefaultServerIP(String i) {
   this.IP = i;
 }//end

 //Get default PORT
 public void setDefaultServerPORT(int p) {
   this.PORT = p;
 }//end

 //Set CommunicateServer object
 public void setCommunicateServer(CommunicateServer cs) {
   this.communicateSrv = cs;
 }

 //Get the Communicate server object
 public CommunicateServer getCommunicateServer() {
   return this.communicateSrv;
 }


  /********************************************************************
  * This method will be used to create a popUp menu each time an error
  * occurs.
  */
 private void createWarningDialog(String warn)
 {
   JOptionPane.showMessageDialog(this,"eLearningMaps - " + warn);
 }//end
 
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel clientConsoleLogo;
  private javax.swing.JButton drawOfflineBtb;
  private javax.swing.JMenu fileMenu;
  private javax.swing.JLabel forgotPassLabel;
  private javax.swing.JButton goOnlineBtn;
  private javax.swing.JMenu helpMenu;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JMenuItem jMenuItem1;
  private javax.swing.JMenuItem jMenuItem3;
  private javax.swing.JCheckBoxMenuItem localOnlyCheckBox;
  private javax.swing.JPanel mainPanel;
  private javax.swing.JMenuItem menuItemIncoming;
  private javax.swing.JMenuItem menuItemServer;
  private javax.swing.JLabel newUserLabel;
  private javax.swing.JLabel passLbl;
  private javax.swing.JPasswordField passTxt;
  private javax.swing.JMenu settingsMenu;
  private javax.swing.JLabel userLbl;
  private javax.swing.JTextField userNameTxt;
  // End of variables declaration//GEN-END:variables

}//end class
